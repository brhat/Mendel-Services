# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *
# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

secretsdir = os.environ.get("SECRETSDIR", "secrets")
c['secretsProviders'] = [secrets.SecretInAFile(dirname=secretsdir)]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
multiarch_worker = os.environ.get("MULTIARCH_NAME",'multiarch')
armv6_worker = os.environ.get("ARMV6_NAME",'rpi_armv6')
armv7_worker = os.environ.get("ARMV7_NAME",'rpi_armv7')
armv8_worker = os.environ.get("ARMV8_NAME",'rpi_armv8')
arm64v8_worker = os.environ.get("ARM64V8_NAME",'rpi_arm64v8')
windows_worker = os.environ.get("WINDOWS_NAME",'windows')
c['workers'] = [
                worker.Worker(multiarch_worker, os.environ.get("MULTIARCH_PASS",'pass')),
                worker.Worker(armv6_worker, os.environ.get("ARMV6_PASS",'pass')),
                worker.Worker(armv7_worker, os.environ.get("ARMV7_PASS",'pass')),
                worker.Worker(armv8_worker, os.environ.get("ARMV8_PASS",'pass')),
                worker.Worker(arm64v8_worker, os.environ.get("ARM64V8_PASS",'pass')),
                worker.Worker(windows_worker, os.environ.get("WINDOWS_PASS",'pass')),
                ]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

checkbitsizeRepo = 'https://github.com/brhat/checkBitSize.git'
testRepo = 'https://github.com/brhat/data-compressor-tests.git'
compressorRepoName = 'data-compressor'
compressorRepoOwner = 'dustsigns'
compressorRepo = 'https://github.com/brhat/data-compressor.git'
token = open(secretsdir + "/githubToken").read().strip()

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        checkbitsizeRepo,
        workdir='gitpoller-workdir', branch='master',
        pollInterval=30))
c['change_source'].append(changes.GitPoller(
        testRepo,
        workdir='gitpoller-workdir1', branch='master',
        pollInterval=30))
c['change_source'].append(changes.GitPoller(
        compressorRepo,
        workdir='gitpoller-workdir2',
        branches=['master', 'squash2'],
        pollInterval=30))
c['change_source'].append(changes.GitHubPullrequestPoller(
	owner=compressorRepoOwner,
	repo=compressorRepoName,
	pollInterval=30,
	token=token))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="anyBranch",
                            treeStableTimer=None,
                            builderNames=["x86_64","i386","armv6_native","armv7_native","armv8_native","arm64v8_native","arm","win_x64","win32"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["x86_64","i386","armv6_native","armv7_native","armv8_native","arm64v8_native","arm","win_x64","win32"]))

####### FACTORIES
factoryLinux_x86_64 = util.BuildFactory()
factoryLinux_x86_64.addStep(steps.Git(name="git - checkBitSize", repourl=checkbitsizeRepo, workdir='checkBitSize', mode='full', alwaysUseLatest='true'))
factoryLinux_x86_64.addStep(steps.Git(name="git - tests", repourl=testRepo, workdir='tests', mode='full', alwaysUseLatest='true'))
factoryLinux_x86_64.addStep(steps.Git(name="git - data-compressor", repourl=compressorRepo, workdir='data-compressor', mode='full', alwaysUseLatest='true'))
factoryLinux_x86_64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/checkBits.sh", "x86_64"]))
factoryLinux_x86_64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "x86_64", "8"]))
factoryLinux_x86_64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "x86_64", "16"]))
factoryLinux_x86_64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "x86_64", "32"]))
factoryLinux_x86_64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "x86_64", "64"]))

factoryLinux_i386 = util.BuildFactory()
factoryLinux_i386.addStep(steps.Git(name="git - checkBitSize", repourl=checkbitsizeRepo, workdir='checkBitSize', mode='full', alwaysUseLatest='true'))
factoryLinux_i386.addStep(steps.Git(name="git - tests", repourl=testRepo, workdir='tests', mode='full', alwaysUseLatest='true'))
factoryLinux_i386.addStep(steps.Git(name="git - data-compressor", repourl=compressorRepo, workdir='data-compressor', mode='full', alwaysUseLatest='true'))
factoryLinux_i386.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/checkBits.sh", "i386"]))
factoryLinux_i386.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "i386", "8"]))
factoryLinux_i386.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "i386", "16"]))
factoryLinux_i386.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "i386", "32"]))

factoryLinux_armhf = util.BuildFactory()
factoryLinux_armhf.addStep(steps.Git(name="git - checkBitSize", repourl=checkbitsizeRepo, workdir='checkBitSize', mode='full', alwaysUseLatest='true'))
factoryLinux_armhf.addStep(steps.Git(name="git - tests", repourl=testRepo, workdir='tests', mode='full', alwaysUseLatest='true'))
factoryLinux_armhf.addStep(steps.Git(name="git - data-compressor", repourl=compressorRepo, workdir='data-compressor', mode='full', alwaysUseLatest='true'))
factoryLinux_armhf.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/checkBits.sh", "armhf"]))
factoryLinux_armhf.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "armhf", "8"]))
factoryLinux_armhf.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "armhf", "16"]))
factoryLinux_armhf.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "armhf", "32"]))

factory_arm= util.BuildFactory()
factory_arm.addStep(steps.Git(name="git - checkBitSize", repourl=checkbitsizeRepo, workdir='checkBitSize', mode='full', alwaysUseLatest='true'))
factory_arm.addStep(steps.Git(name="git - tests", repourl=testRepo, workdir='tests', mode='full', alwaysUseLatest='true'))
factory_arm.addStep(steps.Git(name="git - data-compressor", repourl=compressorRepo, workdir='data-compressor', mode='full', alwaysUseLatest='true'))
factory_arm.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/checkBits.sh", "arm"]))
factory_arm.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "arm", "8"]))
factory_arm.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "arm", "16"]))
factory_arm.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "arm", "32"]))

factory_aarch64= util.BuildFactory()
factory_aarch64.addStep(steps.Git(name="git - checkBitSize", repourl=checkbitsizeRepo, workdir='checkBitSize', mode='full', alwaysUseLatest='true'))
factory_aarch64.addStep(steps.Git(name="git - tests", repourl=testRepo, workdir='tests', mode='full', alwaysUseLatest='true'))
factory_aarch64.addStep(steps.Git(name="git - data-compressor", repourl=compressorRepo, workdir='data-compressor', mode='full', alwaysUseLatest='true'))
factory_aarch64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/checkBits.sh", "arm"]))
factory_aarch64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "arm", "8"]))
factory_aarch64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "arm", "16"]))
factory_aarch64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "arm", "32"]))
factory_aarch64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["../tests/buildAndTest.sh", "arm", "64"]))

factoryWin_x64 = util.BuildFactory()
factoryWin_x64.addStep(steps.Git(name="git - checkBitSize", repourl=checkbitsizeRepo, workdir='checkBitSize', mode='full', alwaysUseLatest='true'))
factoryWin_x64.addStep(steps.Git(name="git - tests", repourl=testRepo, workdir='tests', mode='full', alwaysUseLatest='true'))
factoryWin_x64.addStep(steps.Git(name="git - data-compressor", repourl=compressorRepo, workdir='data-compressor', mode='full', alwaysUseLatest='true'))
factoryWin_x64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/checkBits.sh", "x64"]))
factoryWin_x64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/buildAndTest.sh", "x64", "8"]))

factoryWin_x64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/buildAndTest.sh", "x64", "16"]))
factoryWin_x64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/buildAndTest.sh", "x64", "32"]))
factoryWin_x64.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/buildAndTest.sh", "x64", "64"]))

factoryWin32 = util.BuildFactory()
factoryWin32.addStep(steps.Git(name="git - checkBitSize", repourl=checkbitsizeRepo, workdir='checkBitSize', mode='full', alwaysUseLatest='true'))
factoryWin32.addStep(steps.Git(name="git - tests", repourl=testRepo, workdir='tests', mode='full', alwaysUseLatest='true'))
factoryWin32.addStep(steps.Git(name="git - data-compressor", repourl=compressorRepo, workdir='data-compressor', mode='full', alwaysUseLatest='true'))
factoryWin32.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/checkBits.sh", "win32"]))

factoryWin32.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/buildAndTest.sh", "x64", "8"]))

factoryWin32.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/buildAndTest.sh", "x64", "16"]))
factoryWin32.addStep(steps.ShellCommand(description="building and testing", descriptionDone="build and test", command=["C:\\Program Files\\Git\\bin\\bash.exe", "../tests/buildAndTest.sh", "x64", "32"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

c['builders'].append(
    util.BuilderConfig(name="x86_64",
      workernames=[multiarch_worker],
      factory=factoryLinux_x86_64))

c['builders'].append(
    util.BuilderConfig(name="i386",
      workernames=[multiarch_worker],
      factory=factoryLinux_i386))

c['builders'].append(
    util.BuilderConfig(name="arm",
      workernames=[multiarch_worker],
      factory=factoryLinux_armhf))

c['builders'].append(
    util.BuilderConfig(name="armv6_native",
      workernames=[armv6_worker],
      factory=factory_arm))

c['builders'].append(
    util.BuilderConfig(name="armv7_native",
      workernames=[armv7_worker],
      factory=factory_arm))

c['builders'].append(
    util.BuilderConfig(name="armv8_native",
      workernames=[armv8_worker],
      factory=factory_arm))

c['builders'].append(
    util.BuilderConfig(name="arm64v8_native",
      workernames=[arm64v8_worker],
      factory=factory_aarch64))

c['builders'].append(
    util.BuilderConfig(name="win_x64",
      workernames=[windows_worker],
      factory=factoryWin_x64))

c['builders'].append(
    util.BuilderConfig(name="win32",
      workernames=[windows_worker],
      factory=factoryWin32))

################

gs = reporters.GitHubStatusPush(token=util.Secret("githubToken"),
                                context=util.Interpolate("buildbot/%(prop:buildername)s"),
                                startDescription='Build started.',
                                endDescription='Build end',
                                verbose=True)

c['services'] = []
#c['services'].append(gs)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

#c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = os.environ.get("BUILDBOT_TITLE", "buildbot")
c['titleURL'] = os.environ.get("BUILDBOT_TITLE_URL", "https://docs.buildbot.net/latest/developer/config.html#")

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))


c['www']['avatar_methods'] = []

authz = util.Authz(
        allowRules = [
                util.AnyControlEndpointMatcher(role="admins")
        ],
        roleMatchers = [
                util.RolesFromEmails(admins=["you@email.provider"])
        ]
)
auth = util.HTPasswdAuth(secretsdir + "/htpasswd")
c['www']['auth'] = auth
c['www']['authz'] = authz

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
c['buildbotNetUsageData'] = None
